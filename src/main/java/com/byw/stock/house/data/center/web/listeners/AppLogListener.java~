package com.topsec.tss.core.web.listener;

import java.util.ArrayList;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import com.topsec.tss.core.web.util.ApplicationReferent;
import com.topsec.tss.core.web.util.ApplicationServletContextUtils;
import com.topsec.tss.core.web.util.Utils;
import com.topsec.tss.platform.log.PlatformLogger;
import com.topsec.tss.platform.log.PlatformLoggerConfiguration;
import com.topsec.tss.platform.service.ApplicationLoggingService;


/**
 * 
 * 系统日志监听.
 * 
 * 系统日志启动监听.
 * 
 * @title ApplicationLoggingListener
 * @package com.topsec.tss.core.web.listener
 * @author baiyanwei
 * @version 1.0
 * @date 2014-5-15
 * 
 */
public class ApplicationLoggingListener implements ServletContextListener {

    /**
     * logger.
     */
    final private static PlatformLogger theLogger = PlatformLogger.getLogger(ApplicationLoggingListener.class);

    @Override
    public void contextDestroyed(ServletContextEvent arg0) {

    }

    @Override
    public void contextInitialized(ServletContextEvent arg0) {

        theLogger.info("startRegisterLogger");
        //填写配置文件
        fillParameterInSystem(arg0);
        //设置APPLICATION的引用
        ApplicationServletContextUtils.setServletContext(arg0.getServletContext());
        //取得LOGGING配置文件名称
        String loggingCfgPath = arg0.getServletContext().getInitParameter(ApplicationReferent.appLogCfgPath.paremeterName());
        //
        try {
            ArrayList<Class<?>> frameworkClassList = new ArrayList<Class<?>>();
            frameworkClassList.add(ApplicationLoggingService.class);
            //初始化LOGGING
            PlatformLoggerConfiguration.initConfigurationForLogging(loggingCfgPath, frameworkClassList);
        } catch (Exception e) {
            theLogger.error(loggingCfgPath, e);
        }
        theLogger.info("startRegisterLoggerFinshed");
    }

    /**
     * 将参数写入系统中, 根据WEB.XML中的context-param参数填充到System中.
     * 
     * @param sce
     */
    private void fillParameterInSystem(ServletContextEvent sce) {

        //设置启动时间
        Utils.setSystemParameter(ApplicationReferent.appStartupTime.paremeterName(), String.valueOf(System.currentTimeMillis()));
        //LOGGING配置文件
        Utils.setSystemParameter(ApplicationReferent.appLogCfgPath.paremeterName(), sce.getServletContext().getInitParameter(ApplicationReferent.appLogCfgPath.paremeterName()));
        //Services配置文件
        Utils.setSystemParameter(ApplicationReferent.appServiceCfgPath.paremeterName(), sce.getServletContext().getInitParameter(ApplicationReferent.appServiceCfgPath.paremeterName()));

    }
}
